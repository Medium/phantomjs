#!/usr/bin/env node

/**
 * Script that will execute the downloaded phantomjs binary.  stdio are
 * forwarded to and from the child process.
 *
 * The following is for an ugly hack to avoid a problem where the installer
 * finds the bin script npm creates during global installation.
 *
 * {NPM_INSTALL_MARKER}
 */

var fs = require('fs')
var path = require('path')
var spawn = require('child_process').spawn

var phantomLib = require(path.join(__dirname, '..', 'lib', 'phantomjs'))
var binPath = phantomLib.path

// If no binary is available for the current platform, install it then run phantom
if (!binPath) {
  var installProcess = spawn('node', [path.join(__dirname, '../install.js')], { stdio: 'inherit' })
  installProcess.on('close', function () {
    binPath = path.join(__dirname, '../lib', JSON.parse(fs.readFileSync(path.join(__dirname, '../lib/binary.json')))[process.platform])
    fs.chmodSync(binPath, '755')
    runPhantom()
  })
} else {
  runPhantom()
}

function runPhantom() {
  var args = process.argv.slice(2)

  // For Node 0.6 compatibility, pipe the streams manually, instead of using
  // `{ stdio: 'inherit' }`.
  var cp = spawn(binPath, args)
  cp.stdout.pipe(process.stdout)
  cp.stderr.pipe(process.stderr)
  process.stdin.pipe(cp.stdin)

  cp.on('error', function (err) {
    console.error('Error executing phantom at', binPath)
    console.error(err.stack)
  })
  cp.on('exit', process.exit)

  process.on('SIGTERM', function() {
    cp.kill('SIGTERM')
    process.exit(1)
  })
}

